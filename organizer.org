#+TITLE: DTL model checking algorithms
#+AUTHOR: Augusto Peres

* Introduction

* Features

* Details on the implementation

** Testing and benchmarking 

*** Benchmarking
    To write proper benchmarks visit [[http://taylor.fausak.me/2014/03/04/haskeleton-a-haskell-project-skeleton/#setup][This website]].

** Automata theoretic approach

*** Optimizations that I might need to do

    The first benchmark obtained without any optimizations was the following
    #+BEGIN_SRC shell
    Benchmark dtl-model-checking-benchmark: RUNNING...
    benchmarking Tests for one agent easy:/Benchmarking @_1 [X p] and transition system oneAgent1
    time                 558.1 μs   (551.3 μs .. 566.3 μs)
                        0.998 R²   (0.997 R² .. 0.999 R²)
    mean                 562.5 μs   (557.5 μs .. 574.7 μs)
    std dev              27.12 μs   (12.06 μs .. 52.55 μs)
    variance introduced by outliers: 41% (moderately inflated)

    benchmarking Tests for one agent easy:/Benchamarking @_1 [X p => ~p] and transtion system oneAgent
    time                 241.3 μs   (224.3 μs .. 256.7 μs)
                        0.979 R²   (0.975 R² .. 0.988 R²)
    mean                 221.6 μs   (216.0 μs .. 230.1 μs)
    std dev              21.51 μs   (16.32 μs .. 26.74 μs)
    variance introduced by outliers: 77% (severely inflated)

    benchmarking Tests for two agents easy:/Testing for @_1[X p], and the DTS in the thesis part of SAT
    time                 1.372 s    (-6.598 s .. 8.464 s)
                        0.197 R²   (0.004 R² .. 1.000 R²)
    mean                 1.201 s    (485.7 ms .. 2.482 s)
    std dev              1.244 s    (88.94 ms .. 1.564 s)
    variance introduced by outliers: 75% (severely inflated)

    benchmarking Tests for two agents easy:/Testing for @_1[c_2[~q]], and the transition system tThesis
    time                 121.2 ms   (111.6 ms .. 131.0 ms)
                        0.995 R²   (0.987 R² .. 0.999 R²)
    mean                 129.0 ms   (126.1 ms .. 132.5 ms)
    std dev              5.296 ms   (3.392 ms .. 8.048 ms)
    variance introduced by outliers: 11% (moderately inflated)

    benchmarking Tests for two agents easy:/Testing for @_1[p] => @_2[F q] and for transition system in thesis
    time                 1.015 s    (807.3 ms .. 1.113 s)
                        0.995 R²   (0.987 R² .. 1.000 R²)
    mean                 1.038 s    (1.009 s .. 1.064 s)
    std dev              31.53 ms   (22.10 ms .. 38.45 ms)
    variance introduced by outliers: 19% (moderately inflated)

    benchmarking Tests for two agents easy:/Testing for @_1[p] => @_2[X(X q)] and for transition system tThesis
    time                 661.0 ms   (577.1 ms .. 747.9 ms)
                        0.998 R²   (0.992 R² .. 1.000 R²)
    mean                 638.0 ms   (621.7 ms .. 655.1 ms)
    std dev              21.00 ms   (9.602 ms .. 26.64 ms)
    variance introduced by outliers: 19% (moderately inflated)

    benchmarking Tests for two agents medium:/Testing for alphaBenchmarkMedium1 and tThesis
    Benchmark dtl-model-checking-benchmark: ERROR

    --  While building package dtl-model-checking-0.1.0.0 using:
        /Users/augusto/.stack/setup-exe-cache/x86_64-osx/Cabal-simple_mPHDZzAJ_2.4.0.1_ghc-8.6.5 --builddir=.stack-work/dist/x86_64-osx/Cabal-2.4.0.1 bench dtl-model-checking-benchmark
      Process exited with code: ExitFailure 1
    #+END_SRC

**** DONE Make automatons smaller [4/4]
     CLOSED: [2020-04-25 Sat 16:55]
     - [X] Make the states as in the solution proposal.
     - [X] Change the function ~dotProduct~.
     - [X] Remove the propositional symbols input from the automatons
       We need only the propositional symbols present in the formula therefore
       it is stupid to use pass all the propositional symbols to the automaton.
     - [X] Do the same for the function that gives the counter examples.
       In this function when returning the sub-transition systems I should
       change the function to not delete any initial states.
       I should also change the function to delete any transitions between the
       states in that strongly connected component that are not in the product
       with the automaton.

     Do this using the new definition. To see what the new definition is just
     refer to question in the email to Jaime using the definition of /maximal/ set.
     
     This optimization seems essential as the benchmarks did not even finish
     running. It got stuck in transition systems with 16 states, which is still
     very small despite the fact that I left the program running for 6 hours.

     This were the benchmarks before the optimization.

     #+BEGIN_SRC shell
     dtl-model-checking> benchmarks
     Running 1 benchmarks...
     Benchmark dtl-model-checking-benchmark: RUNNING...
     benchmarking for one agent easy:/Benchmarking @_1 [X p] and transition system oneAgent1
     time                 660.8 μs   (621.1 μs .. 701.3 μs)
                         0.930 R²   (0.856 R² .. 0.977 R²)
     mean                 833.5 μs   (737.2 μs .. 1.027 ms)
     std dev              453.8 μs   (291.2 μs .. 719.8 μs)
     variance introduced by outliers: 99% (severely inflated)

     benchmarking for one agent easy:/Benchamarking @_1 [X p => ~p] and transtion system oneAgent
     time                 226.1 μs   (220.0 μs .. 232.4 μs)
                         0.977 R²   (0.953 R² .. 0.991 R²)
     mean                 254.7 μs   (240.0 μs .. 290.5 μs)
     std dev              81.81 μs   (34.78 μs .. 141.3 μs)
     variance introduced by outliers: 98% (severely inflated)

     benchmarking for two agents easy:/Testing for @_1[X p], and the DTS in the thesis part of SAT
     time                 182.8 ms   (169.2 ms .. 192.8 ms)
                         0.997 R²   (0.989 R² .. 1.000 R²)
     mean                 188.0 ms   (183.7 ms .. 195.1 ms)
     std dev              7.857 ms   (2.107 ms .. 11.06 ms)
     variance introduced by outliers: 14% (moderately inflated)

     benchmarking for two agents easy:/Testing for @_1[c_2[~q]], and the transition system tThesis
     time                 128.9 ms   (122.5 ms .. 146.3 ms)
                         0.987 R²   (0.951 R² .. 1.000 R²)
     mean                 133.3 ms   (129.4 ms .. 140.0 ms)
     std dev              7.297 ms   (5.473 ms .. 9.728 ms)
     variance introduced by outliers: 11% (moderately inflated)

     benchmarking for two agents easy:/Testing for @_1[p] => @_2[F q] and for transition system in thesis
     time                 1.184 s    (1.089 s .. 1.346 s)
                         0.997 R²   (0.996 R² .. 1.000 R²)
     mean                 1.106 s    (1.081 s .. 1.147 s)
     std dev              38.26 ms   (3.020 ms .. 48.07 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking for two agents easy:/Testing for @_1[p] => @_2[X(X q)] and for transition system tThesis
     time                 670.9 ms   (601.9 ms .. NaN s)
                         0.998 R²   (0.994 R² .. 1.000 R²)
     mean                 680.8 ms   (666.4 ms .. 693.5 ms)
     std dev              15.29 ms   (13.27 ms .. 17.09 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents1 and fEasy1
     time                 20.78 s    (15.80 s .. 26.97 s)
                         0.990 R²   (0.967 R² .. 1.000 R²)
     mean                 18.26 s    (16.62 s .. 19.50 s)
     std dev              1.811 s    (1.093 s .. 2.213 s)
     variance introduced by outliers: 23% (moderately inflated)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents2 and fEasy1
     time                 15.05 s    (14.51 s .. 15.54 s)
                         1.000 R²   (1.000 R² .. 1.000 R²)
     mean                 15.14 s    (15.03 s .. 15.27 s)
     std dev              128.5 ms   (101.2 ms .. 149.0 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents3 and fEasy1
     time                 14.81 s    (NaN s .. 15.51 s)
                         1.000 R²   (0.999 R² .. 1.000 R²)
     mean                 15.02 s    (14.93 s .. 15.18 s)
     std dev              156.6 ms   (46.09 ms .. 209.4 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents4 and fEasy1
     time                 14.96 s    (14.40 s .. NaN s)
                         1.000 R²   (NaN R² .. 1.000 R²)
     mean                 15.00 s    (14.94 s .. 15.07 s)
     std dev              83.76 ms   (43.23 ms .. 102.0 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents1 and fEasy2
     time                 5.225 s    (4.983 s .. 5.547 s)
                         0.999 R²   (0.999 R² .. 1.000 R²)
     mean                 5.520 s    (5.373 s .. 5.759 s)
     std dev              253.1 ms   (23.96 ms .. 316.2 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents2 and fEasy2
     time                 5.399 s    (5.318 s .. 5.533 s)
                         1.000 R²   (1.000 R² .. 1.000 R²)
     mean                 5.379 s    (5.312 s .. 5.401 s)
     std dev              47.77 ms   (10.67 ms .. 63.68 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents3 and fEasy2
     time                 5.304 s    (5.080 s .. 5.498 s)
                         1.000 R²   (1.000 R² .. 1.000 R²)
     mean                 5.483 s    (5.412 s .. 5.596 s)
     std dev              112.1 ms   (44.12 ms .. 154.2 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents4 and fEasy2
     time                 5.473 s    (5.252 s .. 5.601 s)
                         1.000 R²   (0.999 R² .. 1.000 R²)
     mean                 5.427 s    (5.355 s .. 5.453 s)
     std dev              49.07 ms   (806.3 μs .. 59.95 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents1 and fEasy1
     ^C
     #+END_SRC

     This must be fixed as my goal is to be able to model check with state space
     over 1000 states.

     This should be an easy enough fix.
     
     1. Change the states of the automaton in order to allow just propositional
        symbols that appear in the closure of the formula.
     2. Change the ~dotProduct~ function to allow for transitions when the label
        of the state is contains the Set responsible for the transition in the automaton.
   
     After this optimization the benchmarks greatly increase but sill need to be
     aborted after 128 states.

     #+BEGIN_SRC 
    benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents1 and fEasy1
    time                 4.452 ms   (4.393 ms .. 4.797 ms)
                        0.916 R²   (0.910 R² .. 0.946 R²)
    mean                 5.983 ms   (5.651 ms .. 6.210 ms)
    std dev              1.247 ms   (1.153 ms .. 1.333 ms)
    variance introduced by outliers: 86% (severely inflated)

    benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents2 and fEasy1
    time                 25.78 ms   (25.56 ms .. 25.72 ms)
                        0.998 R²   (0.997 R² .. 0.998 R²)
    mean                 26.07 ms   (26.05 ms .. 26.53 ms)
    std dev              799.3 μs   (796.2 μs .. 1.052 ms)

    benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents3 and fEasy1
    time                 25.09 ms   (24.77 ms .. 25.49 ms)
                        0.994 R²   (0.994 R² .. 0.996 R²)
    mean                 27.68 ms   (26.79 ms .. 28.22 ms)
    std dev              2.419 ms   (2.185 ms .. 2.446 ms)
    variance introduced by outliers: 37% (moderately inflated)

    benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents4 and fEasy1
    time                 9.202 ms   (9.192 ms .. 9.314 ms)
                        0.997 R²   (0.995 R² .. 0.998 R²)
    mean                 9.334 ms   (9.333 ms .. 9.503 ms)
    std dev              266.2 μs   (250.7 μs .. 375.3 μs)

    benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents1 and fEasy1
    time                 188.6 ms   (188.6 ms .. 189.2 ms)
                        1.000 R²   (1.000 R² .. 1.000 R²)
    mean                 188.3 ms   (188.2 ms .. 188.8 ms)
    std dev              774.6 μs   (476.5 μs .. 777.6 μs)
    variance introduced by outliers: 14% (moderately inflated)

    benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents2 and fEasy1
    time                 234.1 ms   (233.1 ms .. 239.0 ms)
                        0.998 R²   (0.998 R² .. 1.000 R²)
    mean                 235.2 ms   (233.8 ms .. 235.4 ms)
    std dev              4.190 ms   (4.190 ms .. 4.190 ms)
    variance introduced by outliers: 14% (moderately inflated)

    benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents3 and fEasy1
    time                 166.0 ms   (166.3 ms .. 166.9 ms)
                        1.000 R²   (1.000 R² .. 1.000 R²)
    mean                 166.4 ms   (166.1 ms .. 166.7 ms)
    std dev              366.3 μs   (232.2 μs .. 383.4 μs)
    variance introduced by outliers: 12% (moderately inflated)

    benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents4 and fEasy1
    time                 317.1 ms   (302.6 ms .. 324.5 ms)
                        0.987 R²   (0.976 R² .. 1.000 R²)
    mean                 327.3 ms   (319.0 ms .. 327.3 ms)
    std dev              19.02 ms   (18.92 ms .. 19.02 ms)
    variance introduced by outliers: 16% (moderately inflated)

    benchmarking 32 states and easy formulas:/Testing for transition system t32StatesAgents1 and fEasy1
    time                 2.775 s    (2.767 s .. 2.917 s)
                        0.999 R²   (0.999 R² .. 1.000 R²)
    mean                 2.818 s    (2.818 s .. 2.818 s)
    std dev              39.54 ms   (12.14 ms .. 45.80 ms)
    variance introduced by outliers: 19% (moderately inflated)

    benchmarking 32 states and easy formulas:/Testing for transition system t32StatesAgents2 and fEasy1
    time                 1.633 s    (1.603 s .. 1.638 s)
                        0.999 R²   (0.999 R² .. 1.000 R²)
    mean                 1.630 s    (1.621 s .. 1.649 s)
    std dev              19.45 ms   (19.45 ms .. 19.45 ms)
    variance introduced by outliers: 19% (moderately inflated)

    benchmarking 64 states and easy formulas:/Testing for transition system t64StatesAgents1 and fEasy1
    time                 21.54 s    (21.05 s .. 21.61 s)
                        1.000 R²   (1.000 R² .. 1.000 R²)
    mean                 21.07 s    (20.99 s .. 21.21 s)
    std dev              241.9 ms   (8.817 ms .. 288.8 ms)
    variance introduced by outliers: 19% (moderately inflated)

    benchmarking 64 states and easy formulas:/Testing for transition system t64StatesAgents2 and fEasy1
    time                 18.66 s    (18.64 s .. 18.76 s)
                        1.000 R²   (1.000 R² .. 1.000 R²)
    mean                 18.46 s    (18.41 s .. 18.46 s)
    std dev              102.5 ms   (43.26 ms .. 102.5 ms)
    variance introduced by outliers: 19% (moderately inflated)

    benchmarking 128 states and easy formulas:/Testing for transition system t128StatesAgents1 and fEasy1
    time                 161.9 s    (161.8 s .. 162.3 s)
                        1.000 R²   (1.000 R² .. 1.000 R²)
    mean                 161.2 s    (161.2 s .. 161.4 s)
    std dev              396.8 ms   (396.8 ms .. 396.8 ms)
    variance introduced by outliers: 19% (moderately inflated)

    benchmarking 128 states and easy formulas:/Testing for transition system t128StatesAgents2 and fEasy1
    time                 114.2 s    (114.2 s .. 114.3 s)
                        1.000 R²   (1.000 R² .. 1.000 R²)
    mean                 114.0 s    (114.0 s .. 114.0 s)
    std dev              360.3 ms   (354.7 ms .. 434.5 ms)
    variance introduced by outliers: 19% (moderately inflated)

    benchmarking 256 states and easy formulas:/Testing for transition system t256StatesAgents1 and fEasy1
    ^C 
    #+END_SRC

    

**** DONE In the function ~downArrow~ see the optimization note 
     CLOSED: [2020-04-27 Mon 10:58]
     Does not appear to affect performance but that might just be because the
     benchmarks are for small formulas so each call to ~downarrow~ is not
     actually expensive

**** DONE Efficiency of visited is reachable
     CLOSED: [2020-04-27 Mon 14:11]
     In the modules ~DTS.hs~ and ~NBA.hs~ when using the functions is reachable
     I use dfs. This makes a traversal over all the transitions system. This
     could be improved to stop when the arrival node is found.

     This optimization greatly improved the speed of the model checking
     algorithm. We can now model check for systems with 256 states

     #+BEGIN_SRC shell
     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents1 and fEasy1
     time                 3.009 ms   (2.994 ms .. 2.999 ms)
                         0.986 R²   (0.977 R² .. 0.984 R²)
     mean                 3.359 ms   (3.313 ms .. 3.418 ms)
     std dev              401.1 μs   (391.3 μs .. 483.4 μs)
     variance introduced by outliers: 74% (severely inflated)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents2 and fEasy1
     time                 8.041 ms   (8.037 ms .. 8.070 ms)
                         0.999 R²   (0.999 R² .. 0.999 R²)
     mean                 8.140 ms   (8.105 ms .. 8.167 ms)
     std dev              206.7 μs   (166.7 μs .. 236.4 μs)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents3 and fEasy1
     time                 10.72 ms   (10.58 ms .. 11.15 ms)
                         0.984 R²   (0.978 R² .. 0.987 R²)
     mean                 10.10 ms   (10.10 ms .. 10.10 ms)
     std dev              633.6 μs   (633.6 μs .. 633.6 μs)
     variance introduced by outliers: 32% (moderately inflated)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents4 and fEasy1
     time                 4.869 ms   (4.839 ms .. 4.914 ms)
                         0.997 R²   (0.995 R² .. 0.999 R²)
     mean                 4.897 ms   (4.897 ms .. 4.897 ms)
     std dev              143.5 μs   (111.1 μs .. 147.7 μs)
     variance introduced by outliers: 12% (moderately inflated)

     benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents1 and fEasy1
     time                 48.53 ms   (48.56 ms .. 49.54 ms)
                         0.998 R²   (0.996 R² .. 0.998 R²)
     mean                 47.88 ms   (47.51 ms .. 48.58 ms)
     std dev              1.071 ms   (832.3 μs .. 1.386 ms)

     benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents2 and fEasy1
     time                 49.89 ms   (45.48 ms .. 51.40 ms)
                         0.952 R²   (0.958 R² .. 0.999 R²)
     mean                 45.63 ms   (45.10 ms .. 47.55 ms)
     std dev              4.432 ms   (4.432 ms .. 4.432 ms)
     variance introduced by outliers: 34% (moderately inflated)

     benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents3 and fEasy1
     time                 41.03 ms   (40.41 ms .. 41.14 ms)
                         0.999 R²   (0.998 R² .. 1.000 R²)
     mean                 41.30 ms   (41.21 ms .. 41.54 ms)
     std dev              709.7 μs   (689.9 μs .. 714.3 μs)

     benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents4 and fEasy1
     time                 47.32 ms   (46.84 ms .. 47.39 ms)
                         1.000 R²   (1.000 R² .. 1.000 R²)
     mean                 47.82 ms   (47.81 ms .. 47.97 ms)
     std dev              484.3 μs   (484.3 μs .. 484.3 μs)

     benchmarking 32 states and easy formulas:/Testing for transition system t32StatesAgents1 and fEasy1
     time                 497.0 ms   (488.4 ms .. 551.3 ms)
                         0.996 R²   (0.997 R² .. 1.000 R²)
     mean                 521.9 ms   (514.0 ms .. 527.5 ms)
     std dev              14.56 ms   (4.907 ms .. 15.38 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 32 states and easy formulas:/Testing for transition system t32StatesAgents2 and fEasy1
     time                 236.0 ms   (233.7 ms .. 243.8 ms)
                         0.999 R²   (0.997 R² .. 0.999 R²)
     mean                 231.1 ms   (231.1 ms .. 231.1 ms)
     std dev              4.009 ms   (4.009 ms .. 4.009 ms)
     variance introduced by outliers: 14% (moderately inflated)

     benchmarking 64 states and easy formulas:/Testing for transition system t64StatesAgents1 and fEasy1
     time                 3.404 s    (3.394 s .. 3.424 s)
                         1.000 R²   (1.000 R² .. 1.000 R²)
     mean                 3.341 s    (3.321 s .. 3.364 s)
     std dev              43.57 ms   (29.86 ms .. 43.57 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 64 states and easy formulas:/Testing for transition system t64StatesAgents2 and fEasy1
     time                 3.525 s    (3.355 s .. 3.552 s)
                         0.999 R²   (1.000 R² .. 1.000 R²)
     mean                 3.508 s    (3.479 s .. 3.508 s)
     std dev              39.21 ms   (28.68 ms .. 42.33 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 128 states and easy formulas:/Testing for transition system t128StatesAgents1 and fEasy1
     time                 34.09 s    (31.41 s .. 33.64 s)
                         0.993 R²   (0.990 R² .. 1.000 R²)
     mean                 36.22 s    (35.68 s .. 36.82 s)
     std dev              1.269 s    (284.1 ms .. 1.526 s)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 128 states and easy formulas:/Testing for transition system t128StatesAgents2 and fEasy1
     time                 21.99 s    (21.60 s .. 21.99 s)
                         1.000 R²   (1.000 R² .. 1.000 R²)
     mean                 23.62 s    (23.03 s .. 24.22 s)
     std dev              1.304 s    (180.5 ms .. 1.551 s)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 256 states and easy formulas:/Testing for transition system t256StatesAgents1 and fEasy1
     time                 149.1 s    (149.1 s .. 149.4 s)
                         1.000 R²   (1.000 R² .. 1.000 R²)
     mean                 149.9 s    (149.7 s .. 150.5 s)
     std dev              1.351 s    (277.2 ms .. 1.517 s)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 256 states and easy formulas:/Testing for transition system t256StatesAgents2 and fEasy1
     Progress 1/2: dtl-model-checking^C
     #+END_SRC
     
**** DONE The ~dotProduct~ state efficiency. 
     CLOSED: [2020-04-28 Tue 12:44]
     It should be much more efficient if I make the construction of the
     transition relation directly instead of filtering for all of the states in
     the automaton and then adding to the system.

     This optimization caused no changes to the measured times. Clearly the
     bottle neck of the implementation is not here.

     #+BEGIN_SRC shell
     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents1 and fEasy1
     time                 3.154 ms   (3.041 ms .. 3.271 ms)
                         0.925 R²   (0.874 R² .. 0.911 R²)
     mean                 4.210 ms   (4.105 ms .. 4.307 ms)
     std dev              2.132 ms   (2.117 ms .. 2.489 ms)
     variance introduced by outliers: 98% (severely inflated)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents2 and fEasy1
     time                 7.181 ms   (7.249 ms .. 7.302 ms)
                         0.984 R²   (0.979 R² .. 0.993 R²)
     mean                 7.951 ms   (7.906 ms .. 8.138 ms)
     std dev              616.1 μs   (580.3 μs .. 770.4 μs)
     variance introduced by outliers: 43% (moderately inflated)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents3 and fEasy1
     time                 8.927 ms   (8.777 ms .. 9.143 ms)
                         0.985 R²   (0.982 R² .. 0.996 R²)
     mean                 9.075 ms   (9.074 ms .. 9.181 ms)
     std dev              543.7 μs   (520.2 μs .. 599.1 μs)
     variance introduced by outliers: 30% (moderately inflated)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents4 and fEasy1
     time                 4.413 ms   (4.403 ms .. 4.413 ms)
                         0.999 R²   (0.999 R² .. 1.000 R²)
     mean                 4.479 ms   (4.462 ms .. 4.490 ms)
     std dev              86.81 μs   (85.68 μs .. 102.0 μs)

     benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents1 and fEasy1
     time                 47.55 ms   (46.58 ms .. 47.27 ms)
                         0.999 R²   (0.999 R² .. 0.999 R²)
     mean                 47.52 ms   (47.28 ms .. 47.57 ms)
     std dev              899.9 μs   (899.9 μs .. 899.9 μs)

     benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents2 and fEasy1
     time                 40.70 ms   (38.92 ms .. 41.58 ms)
                         0.990 R²   (0.984 R² .. 0.992 R²)
     mean                 43.29 ms   (42.04 ms .. 43.99 ms)
     std dev              2.419 ms   (1.951 ms .. 2.801 ms)
     variance introduced by outliers: 14% (moderately inflated)

     benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents3 and fEasy1
     time                 38.26 ms   (38.37 ms .. 39.26 ms)
                         0.999 R²   (0.998 R² .. 0.999 R²)
     mean                 37.82 ms   (37.47 ms .. 38.04 ms)
     std dev              725.4 μs   (725.4 μs .. 725.4 μs)

     benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents4 and fEasy1
     time                 44.80 ms   (44.33 ms .. 45.68 ms)
                         0.999 R²   (0.999 R² .. 1.000 R²)
     mean                 44.76 ms   (44.46 ms .. 44.97 ms)
     std dev              816.4 μs   (706.4 μs .. 890.9 μs)

     benchmarking 32 states and easy formulas:/Testing for transition system t32StatesAgents1 and fEasy1
     time                 566.8 ms   (564.3 ms .. 567.5 ms)
                         1.000 R²   (1.000 R² .. 1.000 R²)
     mean                 563.9 ms   (562.7 ms .. 564.1 ms)
     std dev              2.023 ms   (189.6 μs .. 2.040 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 32 states and easy formulas:/Testing for transition system t32StatesAgents2 and fEasy1
     time                 250.0 ms   (245.8 ms .. 253.8 ms)
                         1.000 R²   (0.999 R² .. 1.000 R²)
     mean                 242.5 ms   (240.8 ms .. 246.2 ms)
     std dev              4.142 ms   (2.552 ms .. 5.127 ms)
     variance introduced by outliers: 16% (moderately inflated)

     benchmarking 64 states and easy formulas:/Testing for transition system t64StatesAgents1 and fEasy1
     time                 3.407 s    (2.657 s .. 3.761 s)
                         0.993 R²   (0.993 R² .. 1.000 R²)
     mean                 3.472 s    (3.472 s .. 3.472 s)
     std dev              152.0 ms   (152.0 ms .. 152.0 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 64 states and easy formulas:/Testing for transition system t64StatesAgents2 and fEasy1
     time                 3.373 s    (3.120 s .. 3.349 s)
                         0.994 R²   (0.989 R² .. 1.000 R²)
     mean                 3.622 s    (3.599 s .. 3.787 s)
     std dev              333.9 ms   (74.62 ms .. 381.8 ms)
     variance introduced by outliers: 22% (moderately inflated)

     benchmarking 128 states and easy formulas:/Testing for transition system t128StatesAgents1 and fEasy1
     time                 33.78 s    (33.63 s .. 34.59 s)
                         1.000 R²   (0.999 R² .. 1.000 R²)
     mean                 33.63 s    (33.55 s .. 33.68 s)
     std dev              379.8 ms   (379.8 ms .. 379.8 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 128 states and easy formulas:/Testing for transition system t128StatesAgents2 and fEasy1
     time                 21.81 s    (21.81 s .. 22.10 s)
                         1.000 R²   (1.000 R² .. 1.000 R²)
     mean                 22.62 s    (22.36 s .. 23.29 s)
     std dev              677.4 ms   (75.88 ms .. 682.7 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 256 states and easy formulas:/Testing for transition system t256StatesAgents1 and fEasy1
     time                 147.7 s    (143.6 s .. 149.7 s)
                         0.999 R²   (0.999 R² .. 1.000 R²)
     mean                 150.4 s    (150.3 s .. 150.4 s)
     std dev              2.598 s    (2.598 s .. 2.598 s)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 256 states and easy formulas:/Testing for transition system t256StatesAgents2 and fEasy1
     Progress 1/2: dtl-model-checking^C
     #+END_SRC

**** Replaced kosaraju by exists path. 
     Actually on of the things that made the most difference was replacing
     Kosaraju. by Simply finding a path. This makes it possible checking systems
     with 526 states

     #+BEGIN_SRC shell
     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents1 and fEasy1
     time                 3.021 ms   (2.901 ms .. 3.302 ms)
                         0.899 R²   (0.850 R² .. 0.915 R²)
     mean                 3.769 ms   (3.611 ms .. 3.987 ms)
     std dev              808.9 μs   (713.0 μs .. 858.7 μs)
     variance introduced by outliers: 91% (severely inflated)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents2 and fEasy1
     time                 4.688 ms   (4.547 ms .. 4.653 ms)
                         0.983 R²   (0.976 R² .. 0.986 R²)
     mean                 5.162 ms   (5.059 ms .. 5.541 ms)
     std dev              1.137 ms   (1.070 ms .. 1.908 ms)
     variance introduced by outliers: 90% (severely inflated)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents3 and fEasy1
     time                 8.286 ms   (7.694 ms .. 10.52 ms)
                         0.916 R²   (0.861 R² .. 0.991 R²)
     mean                 7.690 ms   (7.627 ms .. 7.822 ms)
     std dev              1.142 ms   (1.065 ms .. 1.529 ms)
     variance introduced by outliers: 75% (severely inflated)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents4 and fEasy1
     time                 4.496 ms   (4.458 ms .. 4.500 ms)
                         0.999 R²   (0.998 R² .. 0.999 R²)
     mean                 4.574 ms   (4.536 ms .. 4.576 ms)
     std dev              138.9 μs   (138.9 μs .. 138.9 μs)
     variance introduced by outliers: 13% (moderately inflated)

     benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents1 and fEasy1
     time                 28.36 ms   (28.01 ms .. 29.59 ms)
                         0.994 R²   (0.994 R² .. 0.997 R²)
     mean                 28.15 ms   (28.15 ms .. 28.15 ms)
     std dev              1.095 ms   (1.095 ms .. 1.095 ms)
     variance introduced by outliers: 10% (moderately inflated)

     benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents2 and fEasy1
     time                 20.10 ms   (19.50 ms .. 20.46 ms)
                         0.974 R²   (0.974 R² .. 0.982 R²)
     mean                 18.80 ms   (18.21 ms .. 19.00 ms)
     std dev              1.803 ms   (1.616 ms .. 2.208 ms)
     variance introduced by outliers: 44% (moderately inflated)

     benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents3 and fEasy1
     time                 18.51 ms   (17.39 ms .. 18.83 ms)
                         0.972 R²   (0.957 R² .. 0.988 R²)
     mean                 20.11 ms   (19.57 ms .. 20.41 ms)
     std dev              1.966 ms   (1.904 ms .. 2.120 ms)
     variance introduced by outliers: 44% (moderately inflated)

     benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents4 and fEasy1
     time                 19.89 ms   (19.88 ms .. 19.96 ms)
                         0.999 R²   (0.997 R² .. 0.999 R²)
     mean                 19.75 ms   (19.75 ms .. 19.75 ms)
     std dev              387.5 μs   (362.4 μs .. 398.9 μs)

     benchmarking 32 states and easy formulas:/Testing for transition system t32StatesAgents1 and fEasy1
     time                 149.7 ms   (148.9 ms .. 155.0 ms)
                         0.999 R²   (0.999 R² .. 1.000 R²)
     mean                 155.8 ms   (155.3 ms .. 157.3 ms)
     std dev              7.164 ms   (7.022 ms .. 8.703 ms)
     variance introduced by outliers: 12% (moderately inflated)

     benchmarking 32 states and easy formulas:/Testing for transition system t32StatesAgents2 and fEasy1
     time                 168.9 ms   (167.3 ms .. 169.9 ms)
                         1.000 R²   (1.000 R² .. 1.000 R²)
     mean                 168.2 ms   (167.2 ms .. 168.5 ms)
     std dev              1.175 ms   (777.8 μs .. 1.333 ms)
     variance introduced by outliers: 12% (moderately inflated)

     benchmarking 64 states and easy formulas:/Testing for transition system t64StatesAgents1 and fEasy1
     time                 1.858 s    (1.904 s .. 1.957 s)
                         0.998 R²   (1.000 R² .. 1.000 R²)
     mean                 1.962 s    (1.955 s .. 2.134 s)
     std dev              115.4 ms   (0.0 s .. 130.8 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 64 states and easy formulas:/Testing for transition system t64StatesAgents2 and fEasy1
     time                 1.564 s    (1.488 s .. 1.564 s)
                         0.996 R²   (0.988 R² .. 1.000 R²)
     mean                 1.690 s    (1.690 s .. 1.690 s)
     std dev              83.38 ms   (83.38 ms .. 83.38 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 128 states and easy formulas:/Testing for transition system t128StatesAgents1 and fEasy1
     time                 12.56 s    (12.06 s .. 12.46 s)
                         1.000 R²   (1.000 R² .. 1.000 R²)
     mean                 12.57 s    (12.56 s .. 12.60 s)
     std dev              71.46 ms   (9.753 ms .. 79.20 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 128 states and easy formulas:/Testing for transition system t128StatesAgents2 and fEasy1
     time                 10.91 s    (10.91 s .. 12.38 s)
                         0.987 R²   (0.987 R² .. 0.999 R²)
     mean                 12.55 s    (12.22 s .. 12.57 s)
     std dev              808.6 ms   (808.6 ms .. 808.6 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 256 states and easy formulas:/Testing for transition system t256StatesAgents1 and fEasy1
     time                 49.79 s    (49.71 s .. 49.81 s)
                         1.000 R²   (NaN R² .. 1.000 R²)
     mean                 49.64 s    (49.64 s .. 49.65 s)
     std dev              137.0 ms   (136.8 ms .. 139.0 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 256 states and easy formulas:/Testing for transition system t256StatesAgents2 and fEasy1
     time                 70.23 s    (70.16 s .. 70.27 s)
                         1.000 R²   (1.000 R² .. 1.000 R²)
     mean                 70.37 s    (70.34 s .. 70.40 s)
     std dev              71.55 ms   (71.55 ms .. 71.55 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 512 states and easy formulas:/Testing for transition system t512StatesAgents1 and fEasy1
     time                 411.0 s    (NaN s .. 411.0 s)
                         1.000 R²   (NaN R² .. 1.000 R²)
     mean                 410.6 s    (410.6 s .. 410.8 s)
     std dev              234.2 ms   (234.2 ms .. 234.2 ms)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 512 states and easy formulas:/Testing for transition system t512StatesAgents2 and fEasy1
     time                 390.7 s    (357.7 s .. 395.9 s)
                         0.995 R²   (1.000 R² .. 1.000 R²)
     mean                 410.8 s    (407.4 s .. 413.0 s)
     std dev              18.00 s    (16.30 s .. 19.89 s)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 1024 states and easy formulas:/Testing for transition system t1024StatesAgents1 and fEasy1
     Progress 1/2: dtl-model-checking^C
     #+END_SRC

**** DONE Reducing the automatons and the transition system.
     CLOSED: [2020-04-28 Tue 12:44]
     I should see what is the effect of reducing the transitions system and the
     automatons before and computing strongly connected components.
     The reduction of the automatons should include reducing the GNBA based on
     the final sets.
     
     Benchmarks before the reduction of the automatons
     #+BEGIN_SRC shell 
     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents1 and fEasy1
     time                 2.990 ms   (2.978 ms .. 3.047 ms)
                         0.979 R²   (0.968 R² .. 0.977 R²)
     mean                 3.597 ms   (3.490 ms .. 3.650 ms)
     std dev              751.9 μs   (694.6 μs .. 865.3 μs)
     variance introduced by outliers: 89% (severely inflated)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents2 and fEasy1
     time                 5.393 ms   (5.176 ms .. 5.372 ms)
                         0.977 R²   (0.981 R² .. 0.994 R²)
     mean                 5.013 ms   (5.013 ms .. 5.013 ms)
     std dev              364.1 μs   (348.0 μs .. 435.8 μs)
     variance introduced by outliers: 45% (moderately inflated)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents3 and fEasy1
     time                 7.274 ms   (7.146 ms .. 7.370 ms)
                         0.995 R²   (0.994 R² .. 0.996 R²)
     mean                 7.432 ms   (7.394 ms .. 7.550 ms)
     std dev              476.9 μs   (451.9 μs .. 518.3 μs)
     variance introduced by outliers: 36% (moderately inflated)

     benchmarking 8 states and easy formulas:/Testing for transition system t8StatesAgents4 and fEasy1
     time                 5.243 ms   (4.994 ms .. 5.176 ms)
                         0.952 R²   (0.943 R² .. 0.962 R²)
     mean                 4.912 ms   (4.878 ms .. 4.936 ms)
     std dev              511.5 μs   (511.5 μs .. 511.5 μs)
     variance introduced by outliers: 64% (severely inflated)

     benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents1 and fEasy1
     time                 31.82 ms   (31.30 ms .. 33.58 ms)
                         0.979 R²   (0.981 R² .. 0.988 R²)
     mean                 30.20 ms   (29.76 ms .. 30.66 ms)
     std dev              2.519 ms   (2.206 ms .. 2.889 ms)
     variance introduced by outliers: 34% (moderately inflated)

     benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents2 and fEasy1
     time                 19.08 ms   (18.49 ms .. 21.14 ms)
                         0.951 R²   (0.848 R² .. 0.988 R²)
     mean                 18.20 ms   (18.20 ms .. 18.20 ms)
     std dev              1.914 ms   (1.914 ms .. 1.914 ms)
     variance introduced by outliers: 48% (moderately inflated)

     benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents3 and fEasy1
     time                 19.50 ms   (18.92 ms .. 20.24 ms)
                         0.992 R²   (0.987 R² .. 0.998 R²)
     mean                 18.97 ms   (18.92 ms .. 19.01 ms)
     std dev              702.5 μs   (587.5 μs .. 744.0 μs)
     variance introduced by outliers: 13% (moderately inflated)

     benchmarking 16 states and easy formulas:/Testing for transition system t16StatesAgents4 and fEasy1
     time                 20.69 ms   (20.29 ms .. 21.09 ms)
                         0.979 R²   (0.972 R² .. 0.979 R²)
     mean                 21.06 ms   (20.89 ms .. 21.55 ms)
     std dev              1.460 ms   (1.460 ms .. 1.460 ms)
     variance introduced by outliers: 27% (moderately inflated)

     benchmarking 32 states and easy formulas:/Testing for transition system t32StatesAgents1 and fEasy1
     time                 155.7 ms   (154.8 ms .. 157.1 ms)
                         1.000 R²   (1.000 R² .. 1.000 R²)
     mean                 158.7 ms   (157.1 ms .. 158.9 ms)
     std dev              4.720 ms   (4.720 ms .. 4.720 ms)
     variance introduced by outliers: 12% (moderately inflated)

     benchmarking 32 states and easy formulas:/Testing for transition system t32StatesAgents2 and fEasy1
     time                 175.8 ms   (176.3 ms .. 178.0 ms)
                         1.000 R²   (1.000 R² .. 1.000 R²)
     mean                 171.8 ms   (171.8 ms .. 171.8 ms)
     std dev              2.787 ms   (2.787 ms .. 2.787 ms)
     variance introduced by outliers: 12% (moderately inflated)

     benchmarking 32 states and easy formulas:/Testing for transition system t32StatesAgents1 and fEasy2
     time                 66.86 s    (55.55 s .. 71.51 s)
                         0.997 R²   (0.999 R² .. 1.000 R²)
     mean                 62.28 s    (61.90 s .. 65.04 s)
     std dev              4.020 s    (1.565 s .. 4.509 s)
     variance introduced by outliers: 19% (moderately inflated)

     benchmarking 32 states and easy formulas:/Testing for transition system t32StatesAgents2 and fEasy2
     Progress 1/2: dtl-model-checking^C
     #+END_SRC
     
     After the reduction

     #+BEGIN_SRC shell 
     benchmarking 32 states and easy formulas:/Testing for transition system t32StatesAgents1 and fEasy2
     time                 16.35 s    (16.06 s .. 16.42 s)
                         1.000 R²   (1.000 R² .. 1.000 R²)
     mean                 16.13 s    (16.13 s .. 16.13 s)
     std dev              131.5 ms   (78.47 ms .. 143.3 ms)
     variance introduced by outliers: 19% (moderately inflated)
     #+END_SRC

     Greatly improved the formula for which the automaton can be reduced.

**** DONE Make the function to return just one counterexample.
     CLOSED: [2020-05-29 Fri 12:11]
     Do this by returning the shortest path from any initial state to the state
     that must be fair and then concatenate that path with the path from the
     fair state to itself.
     and then the shortest path from that state to itself.

**** TODO When converting GNBA -> NBA.
     I believe this function would be much more efficient if I make a direction
     construction of the transition function.
     See the note in the comment of ~convertGNBAToNBA~ in the aoutomata theoretic module.

*** Things that could use improvement.

**** DONE The model Checking answer
     CLOSED: [2020-04-22 Wed 00:29]
     I should create a data type for the model checking answer, that way I can
     provide counter example. For example:

     #+BEGIN_SRC haskell
     data ModelCheckingResult a = Satisfies
                                | CounterExample a
                                deriving (Show, Eq, Ord)
     #+END_SRC

     This way I can provide an answer with a counter example in the cases where
     it is not verified

** BDD model checking 

** Bounded model checking

* Next steps

** KNOWCAUSE Cannot create Maps with ROBDDs 
   This is because the instance for order (in the case of the leafs) is not
   properly done and could use improvement. Not a major concern as I can simply
   use the labels which usually also derive order 

** FIXED fails for @_1[c_2(~q)] in the transition system were it should not fail. 
   CLOSED: [2020-04-14 Tue 17:30]
   Never mind. The formula should still fail

** FIXED the algorithm is returning always True.
   CLOSED: [2020-04-14 Tue 17:21]
   The automatons seem to be in working order. The problem must be, therefore on
   the ~dotProduct~ function or when passing to NBA.

   This is caused by the fact that the product does not yield a deterministic
   automaton. The only solution is to change the module ~DTS.hs~ to allow for
   non deterministic transition systems in regards to the transition function.

   There was also a bug that was solved. The was the labels of the transitions
   system would not cause transitions in the automatons using the definition
   with $\sigma = q \cap Lit_i$.

   Instead I should use the condition
   $$\sigma = q \cap AP_i$$
   Then I must change the definition of alphabet to consist only of valuations.

   The previous correction fixed 3 of the 4 test instances

   It still fails for more than one agent

   <2020-04-14 Tue> Found one mistake. I also needed to check that the states in
   strongly connected components were in fact in a loop. Failure to verify this
   causes problems for components with one or more states. 

   <2020-04-14 Tue> Found mistake. In the rules of the global transition
   function I was forcing $\sigma = q \cap AP_i$ instead of $\sigma \cap AP_i =
   q \cap AP_i$

   <2020-04-14 Tue> Found mistake. On is reachable we need to start the dfs at
   false. This eliminates states that don't have self loops.

   <2020-04-14 Tue> Found Mistake. In my thesis. When it is not an action of
   agent we can only require the local formulas to remain unchanged. After that
   there can be changes to the global formulas even if the agent has not taken
   any action.

   <2020-04-14 Tue> Found Mistake. In my thesis(the part with the persistence).
   Must change the definition on the report. Already change in code.

   <2020-04-14 Tue> Found mistake. Could not add some of the transitions to the
   dot product because I was using the function ~T.addTransitionSafe~. Changed
   to ~addTransition~


** DONE Make the model checking algorithm at the top level
   CLOSED: [2020-04-13 Mon 18:57]
   This is, just complete the function using with kosaraju,
 
** DONE Put the function to convert between NBAs and GNBAs in the AutomataTheoreticApproach module [2/2]
   CLOSED: [2020-04-14 Tue 20:57]
   - [X] Make the function from scratch
   - [X] Test the function
     Seems to be working for the small examples tested.

** DONE Make the complementary automaton using my algorithm [4/4]
   CLOSED: [2020-04-10 Fri 15:09]
   - [X] Make the states
   - [X] Make the initial states
   - [X] Make the transition function [3/3]
     - [X] Create a function to test if a transition is possible from a state to
       another state according to a propositional symbol.
     - [X] Create a list with all pairs of states, /i.e/, [(s, s'), ... (w, w')]
     - [X] For each of those pairs of states test the transitions under the
       correct propositional  symbols, /i.e/, the symbols present at those
       states. If said transition is possible then add it to the automaton using
       a fold.
   - [X] Make the accepting sets

** TODO Document the boolean formulas package

** DONE Transition systems module first steps [3/3]
   CLOSED: [2020-04-20 Mon 18:23]
   - [X] Instance graphviz to be able to see the transition systems
     Not really that important and difficult to do because of the constructors
     I can ignore the constructors and just use show on everything. Then, in the
     module, ModelCheckingAppraoch.hs I instance the show properly for all the
     types used.
     ([[file+sys:~/Documents/universidade/MMA/tese-talvez/DTL-Model-Checking/dtl-model-checking/src/DTS.hs][file-here)]]
   - [X] Make manipulation function for states and transitions [2/2]
     - [X] Adding states
     - [X] Adding transitions
   - [X] Function for strongly connected components. This is fundamental for the
     persistence property verification.
     NOTE: This will be pretty much the same
     as the functions for the NBA module. Maybe I can instance a class for both
     of them.
     checking
**** FIXED When using kosaraju
     CLOSED: [2020-04-05 Sun 20:27]
     Does not work property for the transition system ~s = [1, 2, 3, 4]~ with
     transition relation ~3 -a-> 4~ ~4 -a-> 1~.
     NOTE: This probably also implies that there is a BUG in the module for the NBA 

     This is caused by a bad implementation of the algorithm.
     Possible fix: +instead of dfs, I should use the visit subroutine presented in+
     +Wikipedia. Challenging because there is no state in haskell.+     

     This was not necessary, I just needed to change the function ~makeOrder~ to
     prepend /i.e/, ~makeOrder dfs ++ order~. Tested on all the automaton test
     instances and it worked

** TODO Making a function that generates random DTS to be used in model
   NOTE: That this function should preserve all the rules for the transition
   relation. Also note that, in our implementation, we are assuming that the
   transition relation is deterministic. Caution when implementing this in a
   random way.


** DONE The algorithm Exists for binary decision diagrams 
   CLOSED: [2020-04-03 Fri 11:36] DEADLINE: <2020-04-03 Fri>
   
** DONE Start working on the implementation of distributed transition systems
   CLOSED: [2020-04-03 Fri 12:03]

** DONE Make the PRIME functions work for something  other than strings. 
   CLOSED: [2020-04-06 Mon 21:22]
   I do not really need this in the ROBDD.hs module. I can implement the
   functions like image, prime... In the module responsible for the symbolic
   model checking problem.

** DONE Adding transitions in a safe way. 
   CLOSED: [2020-04-05 Sun 16:55]
   Just create checks to see if the transition is possible. Then create
   function like ~addTransitionSafe~.

* Things I am not totally happy about 


** In the algorithm restrict
   I should have the option to return a bdd with something else other than ~Int~
   type.
   Possible fix. I could always change the labels of the binary decision
   diagrams to always be ~Int~. This would prevent me from having all that work
   with orders.

** When using ~Data.Set~ I have to jump back and forth using ~fromList~ and ~toList~
   Maybe I should change the implementation of the distributed transition
   systems to work over lists instead. This would even make it more similar to
   the implementation of the automatons.

